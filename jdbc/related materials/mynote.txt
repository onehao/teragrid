@author onehao 


24. 使用JDBC调用存储过程
CallableStatement （从PreparedStatement扩展来）
cs = connection.prepareCall("{call psname(?,?,?)}");
cs.registerOutParameter(index,Types.INTEGER);
cs.setXXX(i,xxxx);
cs.executeUpdate();
int id=cs.getInt(index);

PreparedStatement 
PsTest.java
String sql = "{call addUser(?,?,?,?)}";
			cs = conn.prepareCall(sql);
			cs.registerOutParameter(4, Types.INTEGER);
			cs.setString(1, "ps name");
			cs.setDate(2, new java.sql.Date(System.currentTimeMillis()));
			cs.setFloat(3, 100f);
			
			
OtherApi.java
ps = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			ps.executeUpdate();
			
			rs = ps.getGeneratedKeys();//可能主键不是整数，或者复合主键，所以返回rs
			int id = 0;
			if(rs.next()){
				id = rs.getInt(1);
			}
	
	
	
25.使用JDBC的批处理功能	

	static void createBatch() throws SQLException{
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			//2.建立连接
			conn = JdbcUtils.getConnection(); //推荐 代码不罗嗦
			//conn = JdbcUtilsSingleton.getInstance().getConnection();//单例模式实现
			String sql = "insert into user(username,birthday,money) values(?,?,?)";
			
			ps = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
			for(int i = 0;i < 1000;i++){
				ps.setString(1, "batchname" + i);
				ps.setDate(2, new Date(System.currentTimeMillis()));
				ps.setFloat(3, 100f + i);
				
				ps.addBatch();
			}
			int [] is = ps.executeBatch();
		} finally {
			JdbcUtils.free(rs, ps, conn);
		}
	}
	
time:
create:34938
createBatch:25171
	
26.可滚动结果集与分页技术
1).不支持分页的数据库
rs = st.executeQuery("select id,username,password,groups from user");
//数据库不支持分页查询的时候用
			rs.absolute(5);
			int i = 0;
			while(rs.next()&& i<3){
				System.out.println("id: "+rs.getInt("id") 
						+ "\tusername: " + rs.getString("username") 
						+ "\tpassword: " + rs.getString("password")
						+ "\tgroups: " + rs.getString("groups"));
			}
2).支持分页的数据库
rs = st.executeQuery("select id,username,password,groups from user limit 5,3");//mysql 支持分页


27.可更新和对更新敏感的结果集
st = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
if("otherapi1".equals(name)){
					rs.updateFloat("money", 300f);
					rs.updateRow();
				}
				


28.数据库的元数据信息
对于hibernate框架很有用
Connection conn = JdbcUtils.getConnection();
		DatabaseMetaData dbmd = conn.getMetaData();
		System.out.println("db name: " + dbmd.getDatabaseProductName());
		System.out.println("tx: " + dbmd.supportsTransactions());
		conn.close();
		
		
32_Java反射的更多细节
1).通过类构造实例
2).通过方法名字调用实例的方法



33_利用Java反射技术将查询结果封装为对象
"set" + colName;
		


34_编写一个基本的连接池来实现连接的复用

36_通过代理模式来保持用户关闭连接的习惯
组合优先继承
面向借口编程
循环调用




38_标准DataSource接口及数据源的总结介绍

数据源和连接池
-- DataSource用来取代DriverManager来获取Connection
-- 通过DataSource获得Connection速度很快；
-- 通过DataSource获得的Connection都是已经被包裹的（不是驱动原来的连接），它的close方法已经被修改。
-- 一般DataSource内部会用一个连接池来缓存Connection，这样可以发幅度提高数据源的访问速度。
LinkedList<Connection> connectionsPool = new LinkedList<Connection>();

-- 连接池可以理解成一个能够存放Connection的Collection；
-- 我们的程序只和DataSource打交道，不会直接访问连接池；


39_如何使用开源项目DBCP（实际项目中常用）
http://commons.apache.org/dbcp/download_dbcp.cgi

http://commons.apache.org/

使用DBCp必须用的3个包
commons-dbcp-xxx.jar
commons-pool-xxx.jar
commons-collections-xxx.jar
配置参数
Java API
BasicDataSourceFactory.createDataSource(properties);


40_将DAO中的修改方法提取到抽象父类中
防止必要的操作漏掉
public class AbstractDao {
	
	/**
	 * @author onehao
	 * @since 2011-05-20
	 * @param sql,args
	 */
	public int update(String sql,Object[] args) {
		// TODO Auto-generated method stub
		Connection conn = null;
		PreparedStatement  ps = null;
		ResultSet rs = null;
		try {
			conn = JdbcUtils.getConnection(); //推荐 代码不罗嗦
			ps = conn.prepareStatement(sql);
			for(int i = 0; i < args.length; i++)
				ps.setObject(i + 1, args[i]);
			return ps.executeUpdate();
		} catch(SQLException e){
			throw new DaoException(e.getMessage(),e);
		}finally {
			JdbcUtils.free(rs, ps, conn);
		}
	}
}

子类
public class UserDaoImpl extends AbstractDao {

	public void delete(User user) {
		String sql = "elete from user where id=?";
		Object[] args = new Object[] { user.getId() };
		super.update(sql, args);
	}

	public void update(User user) {
		String sql = "update user set username=?, birthday=?, money=? where id=?";
		Object[] args = new Object[] { user.getUsername(), user.getBirthday(),
				user.getMoney(), user.getId() };
		super.update(sql, args);
	}
}




41_使用模板方法设计模式处理DAO中的查询方法
抽象时需要变更的地方 “**”
public User findUser(String loginName, String password) {
		// TODO Auto-generated method stub
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		User user = null;
		try {
			conn = JdbcUtils.getConnection(); //推荐 代码不罗嗦
**			String sql = "select id, username, password, groups, birthday, money from user where username=?";
			ps = conn.prepareStatement(sql);
**			ps.setString(1, loginName);
			rs = ps.executeQuery();
			while(rs.next()){
**				user = mappingUser(rs);
			}
		}catch(SQLException e){
			throw new DaoException(e.getMessage(),e);
		}finally {
			JdbcUtils.free(rs, ps, conn);
		}
**	return user;
	}

**	private User mappingUser(ResultSet rs) throws SQLException {
		User user = new User();
		user.setId(rs.getInt("id"));
		user.setUsername(rs.getString("username"));
		user.setPassword(rs.getString("password"));
		user.setGroups(rs.getString("groups"));
		user.setBirthday(rs.getDate("birthday"));
		user.setMoney(rs.getFloat("money"));
		return user;
	}

讲不确定的方法抽象出来让子类去实现。




